{
  "id": "inverted_circle",
  "name": "Inverted Circle",
  "settings": [
    {
      "id": "offset",
      "defaultValue": [0, 0],
      "key": "iOffset",
      "name": "Offset",
      "type": "offset",
      "color": "#FFFFFF"
    },
    {
      "id": "position",
      "defaultValue": [0, 0],
      "key": "iPosition",
      "name": "Camera position",
      "type": "offset",
      "color": "#FFFFFF"
    },
    {
      "id": "scale",
      "defaultValue": 1,
      "key": "iScale",
      "name": "Scale",
      "type": "float",
      "step": 0.01,
      "minValue": 0.01,
      "maxValue": 5
    },
    {
      "id": "strength",
      "defaultValue": -100,
      "key": "iStrength",
      "name": "Strength",
      "type": "float",
      "step": 0.01,
      "minValue": -100,
      "maxValue": 100
    }
  ],
  "fragmentShader": "@use math\n@use wrap\n\nvoid main()\n{\n  vec2 p = gl_FragCoord.xy / iResolution.xy;\n  p -= 0.5;\n  p /= iScale;\n  p += 0.5;\n  p += vec2(-1.0 * iPosition.x + 0.5, iPosition.y + 0.5);\n  \n  vec2 offset = iOffset + 1.0;\n  float r = length(offset);\n  float l = length(p - offset);\n  \n  vec2 v = p + (r / l) * normalize(p - offset);\n  v = mix(p, v, pow(l / r, pow(1.1, iStrength)));\n \n  gl_FragColor = texture2D(iTexture, mirroredRepeat(v));\n}"
}
