{
  "id": "radial_blur_rgb_shift",
  "name": "Radial blur (with RGB shift)",
  "settings": [
    {
      "id": "offset",
      "defaultValue": [0, 0],
      "key": "iOffset",
      "name": "Offset",
      "type": "offset",
      "color": "#FFFFFF"
    },
    {
      "id": "samples",
      "defaultValue": 10,
      "key": "iSamples",
      "name": "Samples",
      "type": "integer",
      "step": 1,
      "minValue": 2,
      "maxValue": 10
    },
    {
      "id": "red_modifier",
      "defaultValue": 1.01,
      "key": "iRed",
      "name": "Red modifier",
      "type": "float",
      "step": 0.01,
      "minValue": 0.9,
      "maxValue": 1.1,
      "description": ""
    },
    {
      "id": "green_modifier",
      "defaultValue": 0.99,
      "key": "iGreen",
      "name": "Green modifier",
      "type": "float",
      "step": 0.01,
      "minValue": 0.9,
      "maxValue": 1.1
    },
    {
      "id": "blue_modifier",
      "defaultValue": 1.04,
      "key": "iBlue",
      "name": "Blue modifier",
      "type": "float",
      "step": 0.01,
      "minValue": 0.9,
      "maxValue": 1.1
    },
    {
      "id": "blur_start",
      "defaultValue": 1,
      "key": "iBlurStart",
      "name": "Blur start",
      "type": "float",
      "step": 0.01,
      "minValue": 0,
      "maxValue": 1
    },
    {
      "id": "blur_width",
      "defaultValue": 0.1,
      "key": "iBlurWidth",
      "name": "Blur width",
      "type": "float",
      "step": 0.01,
      "minValue": 0,
      "maxValue": 2
    }
  ],
  "fragmentShader": "@use wrap\n\nvoid main()\n{\n  vec2 p = gl_FragCoord.xy / iResolution;\n  vec2 offset = vec2(iOffset.x + 0.5, 0.5 - iOffset.y);\n  \n  const int samples = 10;\n\n  p -= offset;\n  float precompute = iBlurWidth * (1.0 / float(iSamples - 1));\n\n  vec4 color = vec4(0.0);\n  for(int i = 0; i < samples; i++)\n  {\n    if (i > iSamples) {\n      break;\n    }\n    \n    float scale = iBlurStart + (float(i) * precompute);\n    vec4 oR = texture2D(iTexture, mirroredRepeat(p * scale + offset * iRed));\n    vec4 oG = texture2D(iTexture, mirroredRepeat(p * scale + offset * iGreen));\n    vec4 oB = texture2D(iTexture, mirroredRepeat(p * scale + offset * iBlue));\n    \n    color.r += oR.r;\n    color.g += oG.g;\n    color.b += oB.b;\n    color.a += (oR.r + oG.g + oB.b) / 3.0;\n  }\n\n\n  color /= float(iSamples);\n  gl_FragColor = color;\n}"
}
